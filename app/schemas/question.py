from pydantic import BaseModel
from typing import List, Optional

# ‚úÖ Sch√©ma pour une r√©ponse possible (une ligne dans AnswerChoices)
class AnswerChoiceSchema(BaseModel):
    id: int
    answer_text: str
    explanation: Optional[str]  # Explication sp√©cifique √† cette r√©ponse
    is_correct: bool  # N√©cessaire pour afficher la correction

    # Champs calcul√©s dynamiquement (ex: en mode feedback)
    is_selected: Optional[bool] = False
    feedback: Optional[str] = None

    # ‚öôÔ∏è Permet de cr√©er un objet √† partir d‚Äôun dictionnaire ou d‚Äôun ORM
    model_config = {
        "from_attributes": True
    }


# üß† Sch√©ma pour une question compl√®te (QuestionMeta + QuestionTranslations + AnswerChoices)
class QuestionSchema(BaseModel):
    id: int
    question_text: str
    question_type: str  # Ex: 'single', 'multiple', 'boolean'
    difficulty_level: Optional[int]  # Peut √™tre utilis√© plus tard pour filtrer
    explanation_detailed: Optional[str]  # Grande explication affich√©e sur demande
    answers: List[AnswerChoiceSchema]  # Liste des r√©ponses li√©es √† cette question

    model_config = {
        "from_attributes": True
    }
